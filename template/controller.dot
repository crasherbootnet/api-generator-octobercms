<?php namespace AhmadFatoni\ApiGenerator\Controllers\API;

use Cms\Classes\Controller;
use BackendMenu;

use Illuminate\Http\Request;
use AhmadFatoni\ApiGenerator\Helpers\Helpers;
use Illuminate\Support\Facades\Validator;
use {{model}};
class {{controllername}}Controller extends Controller
{
	protected ${{modelname}};

    protected $helpers;

    public function __construct({{modelname}} ${{modelname}}, Helpers $helpers)
    {
        parent::__construct();
        $this->{{modelname}}    = ${{modelname}};
        $this->helpers          = $helpers;
    }

    public function index(Request $request){

        $data = $this->{{modelname}};

        foreach($request->except(['page', 'token']) as $key => $value){
            $data = $data->where($key, $value);
        }
        if($request->has('page') && $request->get('page') > 0){
            $data = $data->paginate(10)->toArray();
        }else{
            $data = $data->get();
            $data = $data ? $data->toArray() : [];
        }
        return $this->helpers->apiArrayResponseBuilder(200, 'success', $data);
    }

    public function show($id){

        $data = $this->{{modelname}}->where('id',$id)->first();

        if($data){

            return $this->helpers->apiArrayResponseBuilder(200, 'success', $data->toArray());

        }

        $this->helpers->apiArrayResponseBuilder(400, 'bad request', ['error' => 'invalid key']);

    }

    public function store(Request $request){

    	$arr = $request->all();

        while ( $data = current($arr)) {
            $this->{{modelname}}->{key($arr)} = $data;
            next($arr);
        }

        $validation = Validator::make($request->all(), $this->{{modelname}}->rules);
        
        if( $validation->passes() ){
            $this->{{modelname}}->save();
            return $this->helpers->apiArrayResponseBuilder(201, 'created', $this->{{modelname}});
        }else{
            return $this->helpers->apiArrayResponseBuilder(400, 'fail', $validation->errors() );
        }

    }

    public function update($id, Request $request){
        $arr = $request->all();

        $validation = Validator::make($request->all(), $this->{{modelname}}->rules);
        if($validation->passes()){
            $status = $this->{{modelname}}->where('id',$id)->update($request->all());
            if( $status ){
                return $this->helpers->apiArrayResponseBuilder(200, 'success', $this->{{modelname}}->where('id',$id)->first()->toArray());
            }else{
                return $this->helpers->apiArrayResponseBuilder(400, 'bad request', 'Error, data failed to update.');
            }
        }else{
            return $this->helpers->apiArrayResponseBuilder(400, 'fail', $validation->errors() );
        }
    }

    public function delete($id){

        $data = $this->{{modelname}}->where('id',$id)->first();
        if($data){
            $data->delete();
            return $this->helpers->apiArrayResponseBuilder(200, 'Succes', ['id' => $id]);
        }else{
            return $this->helpers->apiArrayResponseBuilder(500, 'Ressource not found');
        }
    }

    public function destroy($id){

        $data = $this->{{modelname}}->where('id',$id)->first();
        if($data){
            $data->delete();
            return $this->helpers->apiArrayResponseBuilder(200, 'Succes', ['id' => $id]);
        }else{
            return $this->helpers->apiArrayResponseBuilder(500, 'Ressource not found');
        }
    }


    public static function getAfterFilters() {return [];}
    public static function getBeforeFilters() {return [];}
    public static function getMiddleware() {return [];}
    public function callAction($method, $parameters=false) {
        return call_user_func_array(array($this, $method), $parameters);
    }
    
}